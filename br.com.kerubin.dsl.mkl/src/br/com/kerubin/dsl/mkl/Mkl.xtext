grammar br.com.kerubin.dsl.mkl.Mkl with org.eclipse.xtext.common.Terminals

//generate mkl "http://www.com.br.kerubin/dsl/mkl/Mkl"
import "br.com.kerubin.dsl.mkl.model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DomainModel:
	('@label' '(' label=STRING ')')?
	'domain' Name
	service = Service
 ; 

Service:
	(
		(disableGeneration=DisableServiceGeneration)? &
		(webAnalitycs=WebAnalitycs)? &
		(messagingEventHandler=MessagingEventHandler)? &
		('@label' '(' label=STRING ')')? & 
		(enableCustomTestConfig ?= '@enableCustomTestConfig')? &
		(enableDoc ?= '@enableDoc')?
	)
	'service' Name '{'
		( 
			(configuration=Configuration)? &
			(dependencies+=MavenDependency)* & 
			(elements+=(Entity | PublicObject | Enumeration)*) 
		)
	'}'
;

MavenDependency:
	'dependency' '{'
		'groupId' ':' groupId=STRING
		'artifactId' ':' artifactId=STRING
		'version' ':' version=STRING
	'}' 
;

Configuration:
	'config' '{'
	(
		('groupId' ':' groupId=STRING) &
		('version' ':' version=STRING) &
		('servicePort' ':' servicePort=INT) & 
		('cloudConfigUri' ':' cloudConfigUri=STRING) &
		('messagingCore' '{' 'version' ':' messagingCoreVersion=STRING '}')? &
		('databaseCore' '{' 'version' ':' databaseCoreVersion=STRING '}')? &
		('serviceCore' '{' 'version' ':' serviceCoreVersion=STRING '}')? &
		('java' '{' 'version' ':' javaVersion=STRING '}')? &
		('springFrameworkBoot' '{' 'version' ':' springFrameworkBootVersion=STRING '}')? &
		('springCloud' '{' 'version' ':' springCloudVersion=STRING '}')? &
		('springDataReleasetrain' '{' 'version' ':'springDataReleasetrainVersion=STRING '}')? &
		('queryDSL' '{' 'version' ':' queryDSLVersion=STRING '}')? &
		('apacheCommonsLang' '{' 'version' ':' apacheCommonsLangVersion=STRING '}')? &
		('flywayCore' '{' 'version' ':' flywayCoreVersion=STRING '}')? &
		('buildHelperMavenPlugin' '{' 'version' ':' buildHelperMavenPluginVersion=STRING '}')? &
		('aptMavenPlugin' '{' 'version' ':' aptMavenPluginVersion=STRING '}')? &
		('templatingMavenPlugin' '{' 'version' ':' templatingMavenPluginVersion=STRING '}')? &
		('springfoxSwagger' '{' springfoxSwagger=SpringfoxSwagger '}')? 
	)
		
	'}'
;

SpringfoxSwagger:
{SpringfoxSwagger}
	(
		('version' ':' mavenDependencyVersion=STRING)? &
		('title' ':' title=STRING) ? &
		('description' ':' description=STRING) ? 
	)
;

Enumeration:
	('@label' '(' label=STRING ')')?
	'enum' Name '{'
		items+=EnumItem*
	'}'
;

EnumItem:
{EnumItem}
	(name=ID_KEYWORD ( ('as' valueStr=STRING)? ('=' valueInt=INT)? ('label' ':' label=STRING)? (defaultItem?='default')? ) )
	|  (',' EnumItem)
;

Entity:
	(
		(entityVersion = EntityVersion)? &
		(hibFilterDefList += HibFilterDef*) &
		(hibFiltersList += HibFilters*) &
		(disableGeneration=DisableEntityGeneration)? &
		(externalEntity?='@externalEntity')? &
		(subscribeEntityEvents=SubscribeEntityEvents)? & 
		(publishEntityEvents=PublishEntityEvents)? & 
		(enableReplication?='@enableReplication')? &
		(disableWebAnalytics?='@disableWebAnalytics')? &
		(secure?='@secure')? &
		(mapped?='@mapped')? &
		(baseRepository?='@baseRepository')? &
		(auditing?='@auditing')? &
		('@parent' '(' parent=[Entity] ')')? &
		(label=Label)? &
		(help=Help)?
	)
	'entity' Name ('extends' superType=[Entity] )? '{'
		Slots
		Rules?
	'}'
;

Help:
{Help}
	('@help' | 'help') '('
	(
		('text' ':' text=STRING) &
		('icon' ':' icon=STRING)? &
		('styleClass' ':' styleClass=STRING)?
	)
	
	')'
;

Label:
{Label}	
	('@label' | 'label') '('
		(
			('title' ':' title=STRING) &
			('shortTitle' ':' shortTitle=STRING)? /* &
			('gender' ':' gender=NounGender)? &
			('plural' ':' plural=STRING)?*/
		)
	')'
;

/*enum NounGender:
	MASCULINE='masculine' | FEMININE='feminine'
;*/


EntityVersion:
{EntityVersion}	
	'@version' 
	(
	'('
		('columnName' ':' columnName = STRING)?
	')'
	)?
;

// Hibernate @FilterDef
HibFilterDef:
	'@filterDef' '('
		'name' ':' name = STRING ','
		'parameters' ':' '[' parameters += HibParamDef* ']'
	')'
;

// Hibernate @ParamDef
HibParamDef:
	'paramDef' '('
		'name' ':' name = STRING ',' 
		'type' ':' type = STRING 
	')'
	| (',' HibParamDef)
;

// Hibernate @Filters
HibFilters:
{HibFilters}	
	'@filters' '('
		'[' filterList += HibFilter* ']'
	')'
;

//  Hibernate @Filter
HibFilter:
	'filter' '('
		'name' ':' name = STRING ','	
		'condition' ':' condition = STRING	
	')'
	| (',' HibFilter)
;



WebAnalitycs:
{WebAnalitycs}	
	'@webAnalitycs'
	'(' 
		(
			('enabled' ':' enable = BooleanObject)? & // Default true
			('onlyInProduction' ':' onlyInProduction = BooleanObject)? & // Default true 
			('tagId' ':' id = STRING)
		)
	')'	
;

MessagingEventHandler:
{MessagingEventHandler}	
	'@messagingEventHandler'
	('(' 
		(
			('enabled' ':' enable = BooleanObject)
		)
	')')?
;

DisableServiceGeneration:
{DisableServiceGeneration}	
	('@disableGeneration' |
	'@disableGeneration'
	'(' 
		(
			(backend ?= 'backend')? & 
			(backendTest ?= 'backendTest')? & 
			(frontend ?= 'frontend')?
		)
	')')	
;

DisableEntityGeneration:
{DisableEntityGeneration}
	('@disableGeneration' |
	('@disableGeneration'
	'(' 
		(
			(controller ?= 'controller')? &
			(entityJPA ?= 'entityJPA')? &
			(entityDTO ?= 'entityDTO')? &
			(repository ?= 'repository')? &
			(serviceImpl ?= 'serviceImpl')? & 
			(serviceInterface ?= 'serviceInterface')? &
			(sqlDDL ?= 'sqlDDL')? &
			(test ?= 'test')?
		)
	')'))
;

SubscribeEntityEvents:
	'@subscribe' '(' 'domain' '=' externalDomain=ID_KEYWORD ',' 'service' '=' externalService=ID_KEYWORD ',' 'events' '=' '[' events=CudEvents ']' ')'
;

PublishEntityEvents:
{PublishEntityEvents}
	'@publishEvents' ('(' 'events' '=' '[' events=CudEvents ']' ')')?
;

CudEvents:
{CudEvents}
		(cud?='cud') | 
		(
			(created?='created') |
			(created?='created' ',' updated?='updated') |
			(created?='created' ',' updated?='updated' ',' deleted?='deleted') |
			(updated?='updated') |
			(updated?='updated' ',' deleted?='deleted') |
			(updated?='created' ',' deleted?='deleted') |
			(deleted?='deleted') 
		)
;

PublicObject:
	'object' Name ('extends' superType=[PublicObject] )? '{'
		Slots
	'}'
;


// All conflict keywords can go here. So we can skip use of "^" skip symbol.
// WARNING: Cannot ad 'id' here, errors will happen in the grammar.
ID_KEYWORD:
	ID | 'name' | 'parent' | 'optional' | 'many' | 'form' | 'password' | 
	'transient' | 'validation' | 'description' | 'version' | 'title'
;

 fragment Name returns Named:
	name=ID_KEYWORD ('alias' _alias=ID_KEYWORD)?
;

fragment Slots returns Slotted:
	slots+=Slot*
;

Slot:
	(separator = SlotSeparator)?
	Name ':' (associationType=AssociationType)? 
		(parent ?= 'parent')?
		slotType=TypeReference 
		(optional?= ('?' | 'optional'))? (many?= ('*' | 'many'))? 
		(relationship = Relationship)? 
		(
			(autoComplete = AutoComplete)? &
			(listFilter = ListFilter)? &
			('enumType' ':' enumType=EnumType)? &
			(index = ColumnIndex)? &
			(lookupKey?='lookupKey')? &
			(lookupResult?='lookupResult')? &
			(help = Help)? &
			('label' ':' label=STRING)? &
			//('labelGrid' ':' labelGrid=STRING)? &
			(sumField = SumField)? &
			('mask' ':' mask=STRING)? &
			(^hidden ?= 'hidden')? &
			(password ?= 'password')? &
			(transient ?= 'transient')? &
			(publish ?= 'publishedInEvents')? &
			(grid = Grid)? &
			(web = Web)? &
			(sort = Sort)? &
			(validations += Validation*) &
			//(hibFilterDefList += HibFilterDef*) &
			(repositoryFindBy += RepositoryFindBy*) &
			(onChange ?= 'onChange')? &
			(autoCompleteWithOwnerParams?='autoCompleteWithOwnerParams')?
			
		)
;

SlotSeparator:
{SlotSeparator}	
	'separator' 
	(
	'('
		('enabled' ':' enabled = BooleanObject)? &
		('before' ':' before = BooleanObject)? &
		('after' ':' after = BooleanObject)? &
		('styleClass' ':' styleClass = STRING)?
	')'	
	)?
;

RepositoryFindBy:
{RepositoryFindBy}
	methodName = ('findBy' | 'deleteBy') ('('
		(
			('documentation' ':' documentation = STRING)? &
			('custom' ':' custom = STRING)? &
			('query' ':' (query = STRING | 'auto' | 'none'))? & // default is auto
			('resultKind' ':' resultKind = RepositoryResultKind)? & 
			(paged ?= 'paged')? & 
			('packages' ':' '[' packages += STRING | (',' packages += STRING*) ']')?
			
		)
	')')?
;

enum RepositoryResultKind:
	ENTITY='Entity' | OPTIONAL='Optional' | LIST='List' | COLLECTION='Collection' | VOID='void'
;

Validation:
{Validation}	
	'validation' '('
		(
			('name' ':' name = ID_KEYWORD) &
			('message' ':' message = STRING)? &
			('custom' ':' custom = STRING)? &
			('package' ':' package = STRING)?
			
		)
	')'
;

QualifiedName:
    ID_KEYWORD ('.' ID_KEYWORD)*;

ColumnIndex:
{ColumnIndex}	
	'index' ('('
		(
			('name' ':' name = ID_KEYWORD)? &	
			(unique ?= 'unique')? &	
			('expression' ':' expression = STRING)?
			
		)
	')')?
	
;

fragment Rules returns Rulled:
	'rules' '{' rules += Rule* '}'
;

// BEGIN rule
Rule:
	//'with' '(' (targets += AbstractRuleTarget (',' targets += AbstractRuleTarget)*)? ')'
	'with' '(' (target = AbstractRuleTarget)? ')'
	'.' 'apply' '(' apply = RuleApply ')'
	('.' 'when' '(' when = RuleWhen ')')?
	('.' 'action' '(' action = RuleAction ')')?
;

RuleAction:
	'name' ':' actionName = ID_KEYWORD 
	'button' '(' actionButton = ActionButton ')'
;

ActionButton:
	(
		('tooltip' ':' tooltip = STRING) & 
		('label' ':' label = STRING)? & 
		('icon' ':' icon = STRING)? &
		('cssClass' ':' cssClass = STRING)?
	)
;

RuleWhen:
{RuleWhen}
	expression = RuleWhenExpression	
;

RuleWhenExpression:
	left = RuleExpression
		 ( operator = RuleWhenOperator rigth = RuleWhenExpression )?
;

RuleExpression:
	( whenObject = (FieldObject | TemporalObject | NumberObject | FormObject | EntityAndFieldObject) ) 
		('.' objectOperation = RuleWhenAbstractObjectOperation)?
;


EntityAndFieldObject:
	fieldEntity=[Slot] '.' fieldSlot=ID_KEYWORD
;

FormObject:
{FormObject}
	form ?= 'entityForm'
;

RuleWhenAbstractObjectOperation:
	RuleWhenOpIsBetween | 
	RuleWhenOpIsSame | 
	RuleWhenOpIsBefore | 
	RuleWhenOpIsAfter | 
	RuleWhenOpIsNull |
	RuleWhenOpIsNotNull |
	RuleWhenOpIsEquals |
	RuleWhenOpIsNotEquals |
	RuleWhenOpOnCreate |
	RuleWhenOpOnUpdate |
	RuleWhenOpOnInit |
	RuleWhenOpIsNotTrue |
	RuleWhenOpIsTrue |
	RuleWhenOpIsFalse
;

RuleWhenOpOnCreate:
	methodName = 'onCreate'
;

RuleWhenOpOnUpdate:
	methodName = 'onUpdate'
;

RuleWhenOpOnInit:
	methodName = 'onInit'
;

RuleWhenOpIsNull:
	methodName = 'isNull'
;

RuleWhenOpIsNotNull:
	methodName = 'isNotNull'
;

RuleWhenOpIsNotTrue:
	methodName = 'isNotTrue'
;

RuleWhenOpIsTrue:
	methodName = 'isTrue'
;

RuleWhenOpIsFalse:
	methodName = 'isFalse'
;

RuleWhenOpIsBetween:
	methodName = 'isBetween' '(' betweenFrom = RuleWhenTemporalValue ',' betweenTo = RuleWhenTemporalValue ')'
;

RuleWhenOpIsSame:
	methodName = 'isSame' '(' valueToCompare = RuleWhenTemporalValue ')'
;

RuleWhenOpIsBefore:
	methodName = 'isBefore' '(' valueToCompare = RuleWhenTemporalValue ')'
;

RuleWhenOpIsAfter:
	methodName = 'isAfter' '(' valueToCompare = RuleWhenTemporalValue ')'
;

RuleWhenOpAddDays:
	methodName = 'addDays' '(' addDaysValue = RuleWhenTemporalValue ')'
;

NullObject:
	nullValue = 'null'
;

RuleWhenOpIsEquals:
{RuleWhenOpIsEquals}
	methodName = 'isEquals' '(' valueToCompare = RuleWhenEqualsValue ')'
;

RuleWhenOpIsNotEquals:
{RuleWhenOpIsNotEquals}
	methodName = 'isNotEquals' '(' valueToCompare = RuleWhenEqualsValue ')'
;

RuleWhenEqualsValue:
{RuleWhenEqualsValue}	
	enumObject = EnumObject | fieldObject = FieldObject | stringObject = StringObject
;

StringObject:
	strValue = STRING
;

EnumObject:
{EnumObject}
	enumeration=[Enumeration] '.' enumItem=ID_KEYWORD
;

FieldObject:
	field=[Slot]
;

RuleWhenOperator:
{RuleWhenOperator}	
	operator = ('and' | 'or' /* | 'not'*/ | '==' | '>' | '<' | '<=' | '>=')
;

NumberObject:
	value = EDoubleType
;

EDoubleType returns ecore::EDouble:
	INT ('.' INT)?
;

TemporalObject:
	temporalConstant = RuleWhenTemporalConstants | temporalFuncation = TemporalFunctionNextDays
;

TemporalFunctionNextDays:
	'nextDays' '(' days = INT ')'
;

enum RuleWhenTemporalConstants:
	NOW='now' | TODAY='today' | TOMORROW='tomorrow' | YESTERDAY='yesterday' | END_OF_WEEK='endOfWeek'
;

RuleWhenTemporalValue: 
{RuleWhenTemporalValue}
	valueInt = INT | temporalObject = TemporalObject
;

RuleApply:
{RuleApply}	
	(
		('styleClass' ':' styleClass = STRING)? & 
		('styleCss' ':' styleCss = STRING)? &
		('label' ':' label = STRING)? &
		('title' ':' title = STRING)? &
		('equation' '(' fieldMathExpression = FieldMathExpression ')')? &
		(actionExpression = FieldAssignExpression)? &
		(makeCopiesExpression = MakeCopiesExpression)? &
		(searchCEPExpression = SearchCEPExpression)? &
		(disableCUD = DisableCUD)? &
		(disableComponent = DisableComponent)? &
		(hiddeComponent = HiddeComponent)? &
		(crudButtons = CrudButtons)? &
		(hideCUDWebListActions = HideCUDWebListActions)? &
		(hideWebListActions = HideWebListActions)? &
		(webActionsColumn = WebActionsColumn)? &
		(ruleFunction = RuleFunction)? & 
		(rulePolling = RulePolling)? &
		(ruleError = RuleError)? &
		(modifierFunction = ModifierFunction)?
	)
;

CrudButtons:
{CrudButtons}	
	'crudButtons' '('
		(
			('buttonSave' '(' buttonSave = ActionButton ')')? &
			('buttonNew' '(' buttonNew = ActionButton ')')? &
			('buttonBack' '(' buttonBack = ActionButton ')')?
		)
	')'
;

WebActionsColumn:
	'webActionsColumn' '{'
		'width' ':' width = STRING
	'}'
;

HideCUDWebListActions:
	hideCUDWebListActions ?= 'hideCUDWebListActions'
;

HideWebListActions:
	hideWebListActions ?= 'hideWebListActions'
;

DisableComponent:
	disableComponent ?= 'disableComponent'
;

HiddeComponent:
	hiddeComponent ?= 'hiddeComponent'
;

DisableCUD:
	disableCUD ?= 'disableCUD'
;

RuleError:
	'error' '('
		/*'errorMessage' ':'*/ errorMessage=STRING
		(',' /*'params' ':'*/ '[' (params += FunctionParam*) ']')?
		
	')'
;

RuleFunction:
{RuleFunction}	
	'function' '(' 
	(
		('name' ':' methodName = ID_KEYWORD) &
		('params' ':' '[' funcParamThis ?= 'this' ']')? &
		('return' ':' funcReturnThis ?= 'this')? 
		
	)
	')'
;

RulePolling:
{RulePolling}	
	'polling' '(' 
	(
		('callback' ':' callbackName = ID_KEYWORD) &
		('interval' ':' interval = INT)?		
	)
	')'
;

MakeCopiesExpression:
	'makeCopies' '('
		(
			('grouperField' ':' grouperField = FieldObject) &
			('referenceField' ':' referenceField = FieldObject) &
			('hiddeWhen' '(' hiddeWhen = RuleWhen ')')? & 
			('title' ':' title = STRING)? &
			(help = Help)? &
			('helpFieldNumberOfCopies' ':' helpFieldNumberOfCopies = Help)? &
			('helpFieldInterval' ':' helpFieldInterval = Help)? &
			('helpFieldReferenceField' ':' helpFieldReferenceField = Help)? &
			('minCopies' ':' minCopies = INT)? &
			('maxCopies' ':' maxCopies = INT)?
		)
	')'
;

SearchCEPExpression:
	'searchCEP' '('
		(
			('cepField' ':' cepField = FieldObject) &
			('ufField' ':' ufField = FieldObject) &
			('localidadeField' ':' localidadeField = FieldObject) &
			('bairroField' ':' bairroField = FieldObject) &
			('logradouroField' ':' logradouroField = FieldObject) &
			('complementoField' ':' complementoField = FieldObject)
		)
	')'
;


ModifierFunction:
{ModifierFunction}	
	function = ModifierFunctionName '(' (funcParams += FunctionParam*) ')' 
;

FunctionParam:
{FunctionParam}	
	paramStr = STRING | (',' FunctionParam)
;

enum ModifierFunctionName:
	TRIM = 'trim' | TRIM_LEFT = 'trimLeft' | TRIM_RIGTH = 'trimRight' 
;

FieldAssignExpression:
	fieldValues += FieldAndValue (',' fieldValues += FieldAndValue)*
;

FieldAndValue:
	field = FieldObject '=' value = (FieldObject | TemporalObject | NumberObject | NullObject)
;

//  x + (x) + (( x + y) * x + y) 

FieldMathExpression:
	left = TerminalFieldMathExpression (operators += MathOperator rights += TerminalFieldMathExpression)*
;

TerminalFieldMathExpression:
    '(' expression = FieldMathExpression ')' |
    field = FieldObject
;

enum MathOperator:
	PLUS='+' | MINUS='-' | MULTIPLICATION='*' | DIVISION='/'
;

AbstractRuleTarget:
	RuleTargetEnum | RuleTargetField
;

RuleTargetField:
	target = FieldObject
;

RuleTargetEnum:
	target = RuleTarget
;

enum RuleTarget:
	 GRID_ROWS='grid.rows' | 
	 GRID_ROW_CELL='grid.row.cell' | 
	 GRID_SUMROW_LAST_CELL = 'grid.sumRow.lastCell' |
	 GRID_ACTIONS = 'grid.actions' |
	 FORM = 'form' |
	 FORM_ACTIONS = 'form.actions' |
	 FORM_BEFORE_SAVE = 'form.beforeSave' |
	 SUBSCRIBE = 'subscribe' | 
	 FORM_LIST = 'formList' |
	 LIST_FILTER = 'listFilter'
;

//END Rule

SumField:
{SumField}
	'sum'  
	('('
		(
			('styleClass' ':' styleClass = STRING)? &
			('styleCss' ':' styleCss = STRING)? &
			('label' ':' label = STRING)?
		)
	')')?
;


Grid:
{Grid}
	'grid' '('
		(
			(slotIsUnordered ?= 'unordered')? &
			(slotIsHidden ?= 'hidden')? &
			(showNumberAsNegative ?= 'showNumberAsNegative')? &
			(noCurrencySimbol ?= 'noCurrencySimbol')? &
			('label' ':' label = STRING)? &
			('columnWidth' ':' columnWidth = STRING)? &
			(showDataWithIcon = ShowDataWithIcon)? &
			('styleClass' ':' styleClass = STRING)?
		)
	')'
;

ShowDataWithIcon:
{ShowDataWithIcon}	
	'showDataWithIcon' 
	('('
		(
			('icon' ':' icon = STRING)? &
			('size' ':' iconSize = STRING)? &
			('onlyNotNullValue' ':' onlyNotNullValue = ('true' | 'false') )? 
		)
	')')?
;

Web:
{Web}
	'web' '('
		(
			('styleClass' ':' styleClass = STRING)? &
			('label' ':' label = STRING)? &
			(readOnly ?= 'readOnly')? &
			(rememberValue ?= 'rememberValue')?
		)
	')'
;


ListFilter:
{ListFilter}	
	'listFilter' '(' 
		(
			(filterOperator = FilterOperator) & 
			('containerStyleClass' ':' containerStyleClass = STRING)? &
			('styleClass' ':' styleClass = STRING)? &
			(readOnly ?= 'readOnly')? &
			(^hidden ?= 'hidden')?
		)
	')'	
;

FilterOperator:
	filterOperatorEnum = FilterOperatorEnum ':' label = STRING ('default' ':' def=STRING)?
;

enum FilterOperatorEnum:
	 many='many' | between='between' | isNotNull='isNotNull' | isNull='isNull' | isNotNull_isNull='isNotNull_isNull' | isEqualTo='isEqualTo'
;

AutoComplete:
{AutoComplete}	
	'autoComplete' 
	(
	'('
		(key?='key')? &
		(result?='result')? &
		(data?='data')? &
		(sort = Sort)?
	')'
	)?
;

Sort:
{Sort}	
	'sort' 
	(
	'(' 
		(
			('order' ':' order = ('asc' |'desc'))? &
			('position' ':' position = INT)?
		)
	')'
	)?
;

Relationship:
	OneToOne | OneToMany | ManyToOne | ManyToMany
;

OneToOne:
{OneToOne}
	'oneToOne' | 'oneToOne' RelationshipFeature
;

OneToMany:
{OneToMany}
	'oneToMany' | 'oneToMany' RelationshipFeature
;

ManyToOne:
{ManyToOne}
	'manyToOne' | 'manyToOne' RelationshipFeature
;

ManyToMany:
	'manyToMany' RelationshipFeature
;

fragment RelationshipFeature returns RelationshipFeatured:
	'(' 
		('opposite' ':' field=[Slot])? &
		('fetch' ':' fetchType=FetchType)? &
		(owner?='owner')? &
		(orphanRemoval?='orphanRemoval')? &
		('cascade' ':' '[' cascadeType+=CascadeType (',' cascadeType+=CascadeType)* ']')?
	')'
;

enum CascadeType:
	 ALL='all' | DETACH='detach' | MERGE='merge' | PERSIST='persist' | REFRESH='refresh' | REMOVE='remove'
;

enum EnumType:
	STRING='string' | ORDINAL='ordinal'
;


TypeReference:
	BasicTypeReference | ObjectTypeReference
;

ObjectTypeReference:
	referencedType=[ServiceObject] 
;

enum FetchType:
	EAGER='eager' | LAZY='lazy'
;

enum AssociationType:
	CONTAINS = 'contains' |	REFERS = 'refers'
;

BooleanObject returns ecore::EBooleanObject:
	'false' | 'true'
;


ServiceObject:
	PublicObject | Entity
;

BasicTypeReference:
	basicType=BasicType
;

BasicType:
	StringType | IntegerType | DoubleType | MoneyType | BooleanType | DateType | TimeType | DateTimeType | UUIDType | ByteType
;

StringType: name='string' ('[' length=INT ']')?;
IntegerType: name='integer' (generated ?='generated')?;
DoubleType: name='double';
SmallintType: name='smallint';
MoneyType: name='money';

BooleanType: 
	name='boolean' 
	('default' ':' defaultValue = ('false' | 'true' | 'none') )? &
	('displayFalse' ':' displayFalse = STRING)? &
	('displayTrue' ':' displayTrue = STRING)? 
;

DateType: name='date';
TimeType: name='time';
DateTimeType: name='dateTime';
UUIDType: name='uuid' (generated ?='generated')?;
ByteType: name='byte';

 
 